Basic Level Program 1: The Simple Calculator
"""
Variables: Storing numbers.
Data Types: Integers (int) and floating-point numbers (float).
Input/Output: Taking user input and printing results.
Operators: Basic arithmetic operators (+, -, *, /).
Conditional Statements: Using if, elif, and else to perform different operations based on user choice.
Functions (Optional but recommended): Encapsulating the calculation logic in a function to make the code reusable.

Scenario: Create a program that asks the user for two numbers and an operation (add, subtract, multiply, or divide) and then prints the result. """

def calculate():
 
    print("Welcome to the Basic Calculator!")

    # Loop to ensure valid first number input
    while True:
        try:
            num1 = float(input("Enter the first number: "))
            break  # Exit loop if input is valid
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    # Loop to ensure valid second number input
    while True:
        try:
            num2 = float(input("Enter the second number: "))
            break  # Exit loop if input is valid
        except ValueError:
            print("Invalid input. Please enter a valid number.")

    # Loop to ensure valid operation input
    while True:
        operation = input("Enter the operation (add, subtract, multiply, divide): ").lower()
        if operation in ["add", "subtract", "multiply", "divide"]:
            break  # Exit loop if input is valid
        else:
            print("Invalid operation. Please choose from 'add', 'subtract', 'multiply', or 'divide'.")

    result = None

    if operation == "add":
        result = num1 + num2
    elif operation == "subtract":
        result = num1 - num2
    elif operation == "multiply":
        result = num1 * num2
    elif operation == "divide":
        if num2 != 0:  # Handle division by zero
            result = num1 / num2
        else:
            print("Error: Cannot divide by zero!")
            return # Exit function if division by zero occurs
    
    if result is not None: # Only print result if a calculation was performed
        print(f"The result of {num1} {operation} {num2} is: {result}")

# Run the calculator program
calculate()
--------------------------------------------------------------------------------------------------------------------------
Basic Level Program 2: The To-Do List Manager
"""
Topics Covered:
Data Structures: Using a list to store a collection of to-do items.
Loops: Using a while loop to keep the program running until the user quits.
Functions: Defining functions for adding, removing, and viewing tasks.
Conditional Statements: Using if statements to handle different user commands.
String Manipulation: Formatting the output to display the to-do list clearly.

Scenario: Build a command-line application where a user can add tasks to a list, view all tasks, and remove a task. """

def display_menu():
    """Prints the main menu options for the to-do list application."""
    print("\n--- To-Do List Menu ---")
    print("1. Add Task")
    print("2. View Tasks")
    print("3. Remove Task")
    print("4. Exit")
    print("-----------------------")

def add_task(todo_list):
    """
    Adds a new task to the to-do list.
    Args:
        todo_list (list): The list where tasks are stored.
    """
    task = input("Enter the task you want to add: ").strip()
    if task:  # Ensure the task is not empty
        todo_list.append(task)
        print(f"Task '{task}' added successfully!")
    else:
        print("Task cannot be empty. Please enter a valid task.")

def view_tasks(todo_list):
    """
    Displays all tasks currently in the to-do list.
    Args:
        todo_list (list): The list containing the tasks.
    """
    if not todo_list:
        print("\nYour to-do list is empty!")
    else:
        print("\n--- Your Tasks ---")
        for i, task in enumerate(todo_list, 1):
            print(f"{i}. {task}")
        print("------------------")

def remove_task(todo_list):
    """
    Removes a task from the to-do list based on its number.
    Args:
        todo_list (list): The list containing the tasks.
    """
    if not todo_list:
        print("\nYour to-do list is already empty. Nothing to remove.")
        return

    view_tasks(todo_list) # Show tasks to help user choose
    
    while True:
        try:
            task_num_str = input("Enter the number of the task to remove: ")
            task_num = int(task_num_str)
            
            if 1 <= task_num <= len(todo_list):
                removed_task = todo_list.pop(task_num - 1) # Lists are 0-indexed
                print(f"Task '{removed_task}' removed successfully!")
                break
            else:
                print("Invalid task number. Please enter a number from the list.")
        except ValueError:
            print("Invalid input. Please enter a number.")

def main():
    """Main function to run the to-do list application."""
    tasks = [] # Initialize an empty list to store tasks

    while True:
        display_menu()
        choice = input("Enter your choice (1-4): ").strip()

        if choice == '1':
            add_task(tasks)
        elif choice == '2':
            view_tasks(tasks)
        elif choice == '3':
            remove_task(tasks)
        elif choice == '4':
            print("Exiting to-do list application. Goodbye!")
            break # Exit the main loop
        else:
            print("Invalid choice. Please enter a number between 1 and 4.")

# Run the main application
if __name__ == "__main__":
    main()
--------------------------------------------------------------------------------------------------------------------------
